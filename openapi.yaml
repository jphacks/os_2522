openapi: 3.1.0
info:
  title: Arsome Hackathon API
  version: 1.0.0
  description: |
    顔認識・会話要約を扱うハッカソン向けREST API。言語は日本語を想定。
    - ベースURLは `/v1`（URLバージョニング）
    - 認証は `X-API-Key` ヘッダ
    - エラーは RFC 7807 (application/problem+json) 互換
servers:
  - url: http://localhost:8080/v1
    description: ローカル開発
security:
  - ApiKeyAuth: []

paths:
  /healthz:
    get:
      summary: ヘルスチェック
      operationId: healthz
      responses:
        "200":
          description: OK

  /recognize:
    post:
      summary: 顔の特徴量から人物を照合
      description: |
        クライアント側で生成した顔の特徴量（embedding）を使用して既知人物か判定します。
        `top_k` と `min_score` で結果数・閾値を調整できます。
        クライアントは事前にML Kit + TensorFlow Lite FaceNetで512次元の特徴量を生成してください。
      operationId: postRecognize
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RecognitionRequest"
      responses:
        "200":
          description: 照合結果
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecognitionResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "413":
          $ref: "#/components/responses/PayloadTooLarge"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"

  /recognize-image:
    post:
      summary: 顔認識 (画像版)
      description: 送信された顔画像から特徴量を抽出し、登録済みの人物と照合します。
      operationId: recognizeFaceImage
      tags:
        - 顔認識
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: 顔画像ファイル (JPEG, PNGなど)
                top_k:
                  type: integer
                  description: 上位何件まで候補を返すか。デフォルトは3、1～10の範囲で指定可能。
                  default: 3
                  minimum: 1
                  maximum: 10
                min_score:
                  type: number
                  format: float
                  description: 候補として判定するための類似度スコアの閾値。デフォルトは0.6、0～1の範囲で指定。
                  default: 0.6
                  minimum: 0
                  maximum: 1
      responses:
        "200":
          description: 照合成功。レスポンスは /v1/recognize と同じ形式です。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecognitionResponse"
        "400":
          description: 画像ファイルが不正、または顔が検出できない。
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "500":
          description: サーバー内部エラー（MLモデルのロード失敗など）
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"

  /persons:
    get:
      summary: 人物一覧を取得（ページング）
      operationId: listPersons
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/cursor"
        - in: query
          name: q
          schema: { type: string }
          description: 名前の部分一致検索
      responses:
        "200":
          description: 一覧
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PersonList"
        "401":
          $ref: "#/components/responses/Unauthorized"
    post:
      summary: 新規人物の登録
      operationId: createPerson
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: "#/components/parameters/IdempotencyKey"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PersonCreate"
      responses:
        "201":
          description: 作成
          headers:
            Location:
              schema: { type: string }
              description: 新規リソースURL
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Person"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "409":
          $ref: "#/components/responses/Conflict"

  /persons/{person_id}:
    get:
      summary: 人物の詳細を取得
      operationId: getPerson
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: "#/components/parameters/PersonId"
      responses:
        "200":
          description: 取得成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Person"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    patch:
      summary: 人物の更新（部分更新）
      operationId: updatePerson
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: "#/components/parameters/PersonId"
        - $ref: "#/components/parameters/IdempotencyKey"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PersonUpdate"
      responses:
        "200":
          description: 更新後
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Person"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    delete:
      summary: 人物の削除（ソフトデリート推奨）
      operationId: deletePerson
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: "#/components/parameters/PersonId"
      responses:
        "204":
          description: 削除完了
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

  /persons/{person_id}/faces:
    post:
      summary: 顔の特徴量を追加
      description: |
        クライアント側で生成した顔の特徴量（embedding）を人物に紐付けて保存します。
        クライアントは事前にML Kit + TensorFlow Lite FaceNetで512次元の特徴量を生成してください。
      operationId: addFace
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: "#/components/parameters/PersonId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FaceEmbeddingRequest"
      responses:
        "201":
          description: 作成
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Face"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
    get:
      summary: 人物に紐づく顔一覧
      operationId: listFaces
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: "#/components/parameters/PersonId"
        - in: query
          name: include_embedding
          schema: { type: boolean, default: false }
          description: trueの場合、レスポンスに特徴量（embedding）を含める（クライアント側キャッシュ用）
      responses:
        "200":
          description: 一覧
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items: { $ref: "#/components/schemas/Face" }

  /persons/{person_id}/faces/{face_id}:
    delete:
      summary: 顔の削除
      operationId: deleteFace
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: "#/components/parameters/PersonId"
        - $ref: "#/components/parameters/FaceId"
      responses:
        "204":
          description: 削除完了
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

  /persons/{person_id}/faces-image:
    post:
      summary: 顔画像の追加登録 (画像版)
      description: 特定の人物に、新しい顔画像を追加登録します。サーバー側で特徴量を抽出し、DBに保存します。
      operationId: addFaceImage
      tags:
        - 顔 (Face)
      parameters:
        - $ref: "#/components/parameters/PersonId"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: 追加する顔画像ファイル (JPEG, PNGなど)
                note:
                  type: string
                  description: 備考（最大2000文字）。
      responses:
        "201":
          description: 顔画像の追加登録に成功。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Face"
        "400":
          description: 画像ファイルが不正、または顔が検出できない。
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: 指定された人物IDが見つからない。
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "500":
          description: サーバー内部エラー。
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"

  /persons/{person_id}/encounters:
    get:
      summary: 該当人物との遭遇ログ一覧
      operationId: listEncounters
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: "#/components/parameters/PersonId"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/cursor"
      responses:
        "200":
          description: 一覧
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EncounterList"

  /transcribe:
    post:
      summary: 音声の書き起こしと要約の非同期処理を開始
      operationId: postTranscribe
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: "#/components/parameters/IdempotencyKey"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [audio]
              properties:
                person_id:
                  type: string
                  pattern: "^p-[A-Za-z0-9]+$"
                  description: 既知の場合は指定
                audio:
                  type: string
                  format: binary
                  description: WAV/FLAC/MP3 など
                webhook_url:
                  type: string
                  format: uri
                  description: 完了通知用のWebhook（任意）
      responses:
        "202":
          description: 受け付け
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Job"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /jobs/{job_id}:
    get:
      summary: 非同期ジョブの状態/結果取得
      operationId: getJob
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: "#/components/parameters/JobId"
      responses:
        "200":
          description: ジョブ情報
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Job"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key

  parameters:
    PersonId:
      name: person_id
      in: path
      required: true
      schema:
        type: string
        pattern: "^p-[A-Za-z0-9]+$"
    FaceId:
      name: face_id
      in: path
      required: true
      schema:
        type: string
        pattern: "^f-[A-Za-z0-9]+$"
    JobId:
      name: job_id
      in: path
      required: true
      schema:
        type: string
        pattern: "^j-[A-Za-z0-9]+$"
    IdempotencyKey:
      name: Idempotency-Key
      in: header
      required: false
      description: 同一リクエストの重複実行を防止するキー
      schema:
        type: string
        maxLength: 128
    limit:
      name: limit
      in: query
      schema: { type: integer, minimum: 1, maximum: 100, default: 20 }
      description: 取得上限
    cursor:
      name: cursor
      in: query
      schema: { type: string }
      description: 続き取得用カーソル

  responses:
    BadRequest:
      description: 不正なリクエスト
      content:
        application/problem+json:
          schema: { $ref: "#/components/schemas/Problem" }
    Unauthorized:
      description: 認証エラー
      content:
        application/problem+json:
          schema: { $ref: "#/components/schemas/Problem" }
    NotFound:
      description: リソースが見つからない
      content:
        application/problem+json:
          schema: { $ref: "#/components/schemas/Problem" }
    Conflict:
      description: 競合（重複など）
      content:
        application/problem+json:
          schema: { $ref: "#/components/schemas/Problem" }
    PayloadTooLarge:
      description: ペイロードが大きすぎます
      content:
        application/problem+json:
          schema: { $ref: "#/components/schemas/Problem" }
    UnsupportedMediaType:
      description: 非対応のメディアタイプ
      content:
        application/problem+json:
          schema: { $ref: "#/components/schemas/Problem" }
    UnprocessableEntity:
      description: 処理できないエンティティ（特徴量の次元数不正など）
      content:
        application/problem+json:
          schema: { $ref: "#/components/schemas/Problem" }

  schemas:
    Problem:
      type: object
      required: [type, title, status]
      properties:
        type: { type: string, format: uri }
        title: { type: string }
        status: { type: integer }
        detail: { type: string }
        instance: { type: string }
        trace_id: { type: string, description: ログ相関ID }

    PersonCreate:
      type: object
      required: [name]
      properties:
        name:
          type: string
          maxLength: 100
        face_image_base64:
          type: string
          description: 顔画像のBase64（任意、multipart推奨）
        note:
          type: string
          maxLength: 2000

    PersonUpdate:
      type: object
      properties:
        name: { type: string, maxLength: 100 }
        note: { type: string, maxLength: 2000 }

    Person:
      type: object
      required: [person_id, name, created_at]
      properties:
        person_id:
          type: string
          example: p-67890
        name:
          type: string
        last_summary:
          type: [string, "null"]
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        faces_count:
          type: integer
          minimum: 0

    PersonList:
      type: object
      properties:
        items:
          type: array
          items: { $ref: "#/components/schemas/Person" }
        next_cursor:
          type: [string, "null"]

    Face:
      type: object
      required: [face_id, person_id, created_at, embedding_dim]
      properties:
        face_id:
          type: string
          example: f-12345
        person_id:
          type: string
          example: p-67890
        image_url:
          type: [string, "null"]
          format: uri
          description: 画像の取得用URL（署名付きURLなど）※現在は未使用
        embedding:
          type: [array, "null"]
          items: { type: number, format: float }
          description: 顔の特徴量ベクトル（include_embedding=trueの場合のみ含まれる）
        embedding_dim:
          type: integer
          example: 512
          description: 特徴量の次元数
        model_version:
          type: [string, "null"]
          example: facenet-tflite-v1
          description: 特徴量生成に使用したモデルのバージョン
        embedding_checksum:
          type: [string, "null"]
          example: sha256:abc123...
          description: 特徴量のチェックサム（クライアント側の差分同期用）
        note:
          type: [string, "null"]
        created_at:
          type: string
          format: date-time

    Encounter:
      type: object
      required: [encounter_id, person_id, recognized_at]
      properties:
        encounter_id:
          type: string
          example: e-abc123
        person_id:
          type: string
          example: p-67890
        recognized_at:
          type: string
          format: date-time
        score:
          type: number
          format: float
          minimum: 0
          maximum: 1
        summary:
          type: [string, "null"]

    EncounterList:
      type: object
      properties:
        items:
          type: array
          items: { $ref: "#/components/schemas/Encounter" }
        next_cursor:
          type: [string, "null"]

    RecognitionCandidate:
      type: object
      properties:
        person_id: { type: string, example: p-12345 }
        name: { type: string, example: 山田 太郎 }
        score: { type: number, format: float, minimum: 0, maximum: 1 }
        last_summary: { type: ["string", "null"] }

    RecognitionResponse:
      type: object
      required: [status]
      properties:
        status:
          type: string
          enum: [known, unknown]
        best_match:
          oneOf:
            - $ref: "#/components/schemas/RecognitionCandidate"
            - type: "null"
        candidates:
          type: array
          items: { $ref: "#/components/schemas/RecognitionCandidate" }
        created_encounter:
          oneOf:
            - $ref: "#/components/schemas/Encounter"
            - type: "null"

    Job:
      type: object
      required: [job_id, status, created_at]
      properties:
        job_id:
          type: string
          example: j-xyz789
        status:
          type: string
          enum: [queued, running, succeeded, failed]
        created_at:
          type: string
          format: date-time
        finished_at:
          type: [string, "null"]
          format: date-time
        result:
          $ref: "#/components/schemas/TranscriptionResult"
        error:
          $ref: "#/components/schemas/Problem"

    TranscriptionResult:
      type: object
      properties:
        person_id: { type: ["string", "null"], example: p-12345 }
        transcript: { type: string }
        summary: { type: string }
        language: { type: string, example: ja }
        duration_sec: { type: number, format: float }

    RecognitionRequest:
      type: object
      required: [embedding, embedding_dim, model_version]
      properties:
        embedding:
          type: array
          items: { type: number, format: float }
          description: 顔の特徴量ベクトル（512次元のfloat32配列）
          minItems: 512
          maxItems: 512
        embedding_dim:
          type: integer
          enum: [512]
          description: 特徴量の次元数（現在は512のみサポート）
        model_version:
          type: string
          example: facenet-tflite-v1
          description: 特徴量生成に使用したモデルのバージョン
        top_k:
          type: integer
          minimum: 1
          maximum: 10
          default: 3
          description: 上位K件の候補を返す
        min_score:
          type: number
          format: float
          minimum: 0
          maximum: 1
          default: 0.6
          description: スコア閾値（0-1, 1が完全一致）

    FaceEmbeddingRequest:
      type: object
      required: [embedding, embedding_dim, model_version]
      properties:
        embedding:
          type: array
          items: { type: number, format: float }
          description: 顔の特徴量ベクトル（512次元のfloat32配列）
          minItems: 512
          maxItems: 512
        embedding_dim:
          type: integer
          enum: [512]
          description: 特徴量の次元数（現在は512のみサポート）
        model_version:
          type: string
          example: facenet-tflite-v1
          description: 特徴量生成に使用したモデルのバージョン
        note:
          type: [string, "null"]
          maxLength: 2000
          description: 任意メモ
        source_image_hash:
          type: [string, "null"]
          description: 元画像のハッシュ値（任意）
